{"ast":null,"code":"var _jsxFileName = \"/Users/ao/WebstormProjects/react-management/src/view/product/richTextEditor.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorState, convertToRaw, ContentState } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nexport default class RichTextEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getDetail = () => {\n      return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()));\n    };\n\n    this.onEditorStateChange = editorState => {\n      this.setState({\n        editorState\n      });\n    };\n\n    this.uploadImageCallBack = file => {\n      return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open('POST', '/manage/img/upload');\n        const data = new FormData();\n        data.append('image', file);\n        xhr.send(data);\n        xhr.addEventListener('load', () => {\n          const response = JSON.parse(xhr.responseText);\n          const url = response.data.url;\n          resolve({\n            data: {\n              link: url\n            }\n          });\n        });\n        xhr.addEventListener('error', () => {\n          const error = JSON.parse(xhr.responseText);\n          reject(error);\n        });\n      });\n    };\n\n    const html = this.props.html;\n\n    if (html) {\n      const contentBlock = htmlToDraft(html);\n\n      if (contentBlock) {\n        const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n        const editorState = EditorState.createWithContent(contentState);\n        this.state = {\n          editorState\n        };\n      }\n    } else {\n      this.state = {\n        editorState: EditorState.createEmpty()\n      };\n    }\n  }\n\n  render() {\n    const editorState = this.state.editorState;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Editor, {\n      editorState: editorState,\n      editorStyle: {\n        border: '1px solid #ff9f43',\n        borderRadius: '10px',\n        height: 200,\n        padding: '0 20px'\n      },\n      onEditorStateChange: this.onEditorStateChange,\n      toolbar: {\n        image: {\n          uploadCallback: this.uploadImageCallBack,\n          alt: {\n            present: true,\n            mandatory: true\n          }\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }));\n  }\n\n}\nRichTextEditor.propTypes = {\n  html: PropTypes.string\n};","map":{"version":3,"sources":["/Users/ao/WebstormProjects/react-management/src/view/product/richTextEditor.jsx"],"names":["React","Component","PropTypes","EditorState","convertToRaw","ContentState","Editor","draftToHtml","htmlToDraft","RichTextEditor","constructor","props","getDetail","state","editorState","getCurrentContent","onEditorStateChange","setState","uploadImageCallBack","file","Promise","resolve","reject","xhr","XMLHttpRequest","open","data","FormData","append","send","addEventListener","response","JSON","parse","responseText","url","link","error","html","contentBlock","contentState","createFromBlockArray","contentBlocks","createWithContent","createEmpty","render","border","borderRadius","height","padding","image","uploadCallback","alt","present","mandatory","propTypes","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { EditorState, convertToRaw,ContentState} from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport draftToHtml from 'draftjs-to-html';\nimport htmlToDraft from 'html-to-draftjs';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\n\nexport default class RichTextEditor extends Component {\nstatic propTypes={\nhtml:PropTypes.string\n}\n\nconstructor(props) {\n    super(props);\n    const html = this.props.html;\n    if(html){\n    const contentBlock = htmlToDraft(html);\n        if (contentBlock) {\n          const contentState = ContentState.createFromBlockArray(contentBlock.contentBlocks);\n          const editorState = EditorState.createWithContent(contentState);\n          this.state = {\n            editorState,\n          };\n        }\n    }else{\n    this.state={\n    editorState: EditorState.createEmpty(),\n    }\n    }\n  }\n  getDetail = () => {\n     return draftToHtml(convertToRaw(this.state.editorState.getCurrentContent()))\n   }\n  onEditorStateChange: Function = (editorState) => {\n    this.setState({\n      editorState,\n    });\n  };\n  uploadImageCallBack = (file) => {\n    return new Promise(\n      (resolve, reject) => {\n        const xhr = new XMLHttpRequest()\n        xhr.open('POST', '/manage/img/upload')\n        const data = new FormData()\n        data.append('image', file)\n        xhr.send(data)\n        xhr.addEventListener('load', () => {\n          const response = JSON.parse(xhr.responseText);\n          const url = response.data.url;\n          resolve({data: {link: url}});\n        })\n        xhr.addEventListener('error', () => {\n          const error = JSON.parse(xhr.responseText);\n          reject(error);\n        })\n      }\n    )\n  }\n  render() {\n    const { editorState } = this.state;\n    return (\n      <div>\n        <Editor\n          editorState={editorState}\n          editorStyle={{border:'1px solid #ff9f43',borderRadius:'10px',height:200,padding:'0 20px'}}\n          onEditorStateChange={this.onEditorStateChange}\n          toolbar={{\n                    image: { uploadCallback: this.uploadImageCallBack, alt: { present: true, mandatory: true } },\n                  }}\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}